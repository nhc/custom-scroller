// Generated by CoffeeScript 1.4.0
(function() {
  var ScrollBox;

  ScrollBox = (function() {

    function ScrollBox(container, options) {
      this.container = container;
      this.options = options;
      this.inside = this.container.find('div.scroller');
      this.up_arrow = this.container.find('a.up');
      this.down_arrow = this.container.find('a.down');
      this.bar = this.container.find('.bar');
      this.track = this.container.find(this.options.controls_selector);
      this.setSize();
      this.setPos(0);
      this.bindEvents();
      this.scrollbars();
    }

    ScrollBox.prototype.bindEvents = function() {
      var _this = this;
      this.up_arrow.on('click', function(e) {
        return _this.scrollup(e);
      });
      this.down_arrow.on('click', function(e) {
        return _this.scrolldown(e);
      });
      return this.bar.on('click', function(e) {
        return _this.scrollBar(e);
      });
    };

    ScrollBox.prototype.scrollBar = function(e) {
      var halfway, ypos;
      halfway = this.bar.height() / 2;
      ypos = e.pageY - this.bar.offset().top;
      if (ypos > halfway) {
        return this.down_arrow.click();
      } else {
        return this.up_arrow.click();
      }
    };

    ScrollBox.prototype.setSize = function() {
      return this.size = {
        height: this.inside.actual('height'),
        width: this.inside.actual('width')
      };
    };

    ScrollBox.prototype.setPos = function(num) {
      var old;
      old = this.pos ? this.pos.top : 0;
      return this.pos = {
        top: old + parseInt(num)
      };
    };

    ScrollBox.prototype.reset = function() {
      return this.inside.css({
        position: 'absolute'
      }).animate({
        top: '0'
      }, 100, 'swing');
    };

    ScrollBox.prototype.scrollup = function() {
      if (this.pos.top < 0) {
        this.inside.css({
          position: 'absolute'
        }).animate({
          top: '+=' + this.options.scroll_jump
        }, 100, 'swing');
        return this.setPos(this.options.scroll_jump);
      }
    };

    ScrollBox.prototype.scrolldown = function() {
      var bottom;
      bottom = this.container.actual('height') - this.size.height;
      if (this.pos.top >= bottom) {
        this.inside.css({
          position: 'absolute'
        }).animate({
          top: '-=' + this.options.scroll_jump
        }, 100, 'swing');
        return this.setPos(-this.options.scroll_jump);
      }
    };

    ScrollBox.prototype.scrollbars = function() {
      this.setSize();
      if (this.size.height < this.container.actual('height')) {
        $(this.track).hide();
        return this.reset();
      } else {
        return $(this.track).show();
      }
    };

    return ScrollBox;

  })();

  $.scrollBox = function(element, options) {
    var state;
    state = '';
    this.defaults = {
      scroll_jump: '30',
      controls_selector: '.track'
    };
    this.rc = function() {
      return this.sb.scrollbars();
    };
    this.$element = $(element);
    this.setState = function(_state) {
      return state = _state;
    };
    this.getState = function() {
      return state;
    };
    this.getSetting = function(key) {
      return this.settings[key];
    };
    this.callSettingFunction = function(name, args) {
      if (args == null) {
        args = [];
      }
      return this.settings[name].apply(this, args);
    };
    this.init = function() {
      this.settings = $.extend({}, this.defaults, options);
      this.setState('ready');
      return this.sb = new ScrollBox(this.$element, this.settings);
    };
    this.init();
    return this;
  };

  $.scrollBox.prototype.defaults = {
    message: ''
  };

  $.fn.scrollBox = function(options) {
    return this.each(function() {
      var plugin;
      if ($(this).data('scrollBox') === void 0) {
        plugin = new $.scrollBox(this, options);
        return $(this).data('scrollBox', plugin);
      }
    });
  };

}).call(this);
